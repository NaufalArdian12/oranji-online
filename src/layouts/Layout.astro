---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="apple-touch-icon" sizes="180x180" href="../../public/favicon_io/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="../../public/favicon_io/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="../../public/favicon_io/favicon-16x16.png">
		<link rel="manifest" href="../../public/favicon_io/site.webmanifest">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script is:inline>
          (() => {
              try {
                  const theme = localStorage.getItem('theme') ?? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');

                  document.documentElement.classList.toggle('dark', theme === 'dark');

                  new MutationObserver(() => {
                      const isDark = document.documentElement.classList.contains('dark');
                      localStorage.setItem('theme', isDark ? 'dark' : 'light');
                  }).observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
              } catch (e) {
                    console.error(e);
              }
          })();
        </script>
	</head>
	<body>
		<slot />
	</body>
</html>
